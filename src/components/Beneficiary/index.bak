/* React */
import React from 'react';

/* Packages */
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';

/* Local Components */
import Header from 'components/Header';
import Input from 'components/Input';
import EmptyState from 'components/UtilsComponents/EmptyState';

/* utils */
import { initGeolocalisation, initGeolocalisation2, geoCode, itemsDistance2 } from 'utils';

/* Css */
import './beneficiary.scss';

/* medias */
import shopKeepersBackgroundImage from 'assets/img/background-shopkeepers.jpg';

class Beneficiary extends React.Component {
  state = {
    lat: '',
    long: '',
    isGeoLocAccessible: true,
    itemsOrderedByDistance: [],
    getLocationErrorMessage: false,
  };
  // Avant d'afficher le composant on récupère la localisation via le navigateur et l'ensemble des shops
  componentDidMount = () => {
    const { lat, long, isGeoLocAccessible } = this.state;
    const { role, token, getBeneficiaries } = this.props;

    const location = { lat: '', long: '' };
    if ('geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition(
        position => {
          location.lat = position.coords.latitude;
          location.long = position.coords.longitude;
          getBeneficiaries(role, token);
          const items = itemsDistance2(
            null,
            this.props.beneficiariesWithLocation,
            position.coords.latitude,
            position.coords.longitude,
          );
          console.log(items);
        },
        err => {},
      );
    } else {
      this.setState({
        ...this.state,
        isGeoLocAccessible: false,
      });
    }
    // getBeneficiaries(role, token);
  };

  // componentWillMount() {
  //   const { lat, long, isGeoLocAccessible } = this.state;

  //   initGeolocalisation(this, lat, long, this.itemsDistance, isGeoLocAccessible);
  // }

  // itemsDistance = async () => {
  //   const { lat, long, itemsOrderedByDistance } = this.state;

  //   const { beneficiariesWithLocation } = await this.props;
  //   console.log('distance', beneficiariesWithLocation);
  //   itemsDistance(this, 9999, beneficiariesWithLocation, lat, long, itemsOrderedByDistance);
  // };

  // Soumission du formulaire avec adresse manuelle
  submitAskLocation = evt => {
    evt.preventDefault();
    const { lat, long, isGeoLocAccessible, getLocationErrorMessage } = this.state;
    geoCode(
      this,
      evt.target.locationAddress.value,
      lat,
      long,
      isGeoLocAccessible,
      this.shopsDistance,
      getLocationErrorMessage,
    );
  };

  // onChangeSelect = evt => {
  //   const { value } = evt.target;
  //   const { lat, long, shopsOrderedByDistance } = this.state;
  //   const { beneficiariesWithLocation } = this.props;
  //   itemsDistance(this, value, beneficiariesWithLocation, lat, long, shopsOrderedByDistance);
  // };

  render() {
    //console.log(this.state, this.props);
    return (
      <>
        <Header
          title="Bénéficiaires à proximité"
          backgroundImage={shopKeepersBackgroundImage}
          theme="dark"
        />
        {!this.state.isGeoLocAccessible && (
          <div className="container py-5 shopkeeper-list">
            <div className="row">
              <div className="col">
                <p>
                  Votre géolocalisation n'a pas pu être trouvée, veuillez l'autoriser dans votre
                  navigateur ou renseigner une adresse.
                </p>
                <form onSubmit={this.submitAskLocation}>
                  <Input
                    type="text"
                    className="form-control"
                    label="Adresse complète"
                    required={true}
                    name="locationAddress"
                    id="locationAddress"
                  />
                  {this.state.getLocationErrorMessage && (
                    <p className="text-danger text-small mt-0">
                      L'adresse renseignée n'est pas valide, veuillez réessayer
                    </p>
                  )}
                  <input
                    type="submit"
                    value="valider"
                    className="btn btn-primary"
                    name="submitAskLocation"
                  />
                </form>
              </div>
            </div>
          </div>
        )}
      </>
    );
  }
}

export default Beneficiary;
